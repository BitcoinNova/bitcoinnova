name: Build Bitcoin Nova
on:
  push:
  pull_request:
  release:
    types: [published]
 
env:
  TAG: ${{ github.ref }}

jobs:

  # Common Build matrix for builds on Ubuntu Lasted VM       
  ubuntu_22_build:
    name: ${{ matrix.build_name }}
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        # Add more compilers here if you need them
        build_name: ['Ubuntu 22.04 - GCC 9', 'Ubuntu 22.04 - Clang 12']
        include:
          - build_name: 'Ubuntu 22.04 - GCC 9'
            package_name: 'gcc-9 g++-9'
            cc: gcc-9
            cxx: g++-9
            label: ubuntu-22.04-linux-gcc-9
            deployable: false
          - build_name: 'Ubuntu 22.04 - Clang 12'
            package_name: 'clang-12'
            cc: clang-12
            cxx: clang++-12
            label: ubuntu-22.04-linux-clang-12
            deployable: false
    env:
      CCACHE_DIR: $GITHUB_WORKSPACE/.ccache
      LABEL: ${{ matrix.label }}
    steps:
      - uses: actions/checkout@v4

      # Fetch Dependencies
      - name: Dependencies
        run: |
          sudo apt update
          sudo apt upgrade
          sudo apt install -y libboost-all-dev libssl-dev ${{ matrix.package_name }}
          
      - name: Setup ccache
        run: |
          sudo apt install ccache
          
      - name: Retrieve ccache
        uses: actions/cache@v4
        with:
          path: .ccache
          key: ccache-${{ matrix.label }}     
     
     # Configure the project with cmake
      - name: Configure
        env:
          CC: ${{ matrix.cc }}
          CXX: ${{ matrix.cxx }}
        run: |
          mkdir build && cd build
          cmake -DARCH=default -DCMAKE_BUILD_TYPE=Release -DSTATIC=true ..
          
      # Build for linux
      - name: Build
        run: |
          cd build
          make 

      # Test the crypto
      - name: Test Crypto
        run: |
          cd build/src
          ./cryptotest      
            
      # Prepare for deploy
      - name: Prepare for Deploy
        id: before_deploy
        env:
          COMMIT_SHA: ${{ github.sha }}
        run: |
          if [[ "${TAG:5:4}" == "tags" ]]; then export TAG=${TAG:10}; else export TAG=${COMMIT_SHA}; fi
          cd build/src
          TARGETS="bitcoinnovad miner bitcoinnova-wallet cryptotest bitcoinnova-service wallet-api wallet-upgrader"
          if [[ "${LABEL}" != "aarch64" ]]; then strip ${TARGETS}; fi
          rm -rf BitcoinNova-${TAG}
          mkdir BitcoinNova-${TAG}
          cp ${TARGETS} BitcoinNova-${TAG}/
          cp ../../LICENSE BitcoinNova-${TAG}/
          tar cvfz BitcoinNova-${TAG}-${LABEL}.tar.gz BitcoinNova-${TAG}/
          echo ::set-output name=binary_path::BitcoinNova-${TAG}
          echo ::set-output name=artifact_name::BitcoinNova-${TAG}-${LABEL}
          echo ::set-output name=file_name::BitcoinNova-${TAG}-${LABEL}.tar.gz
     
      # Upload to GH Release
      - name: Upload to GH Release
        if: github.event_name == 'release' && matrix.deployable
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./build/src/${{ steps.before_deploy.outputs.file_name }}
          asset_name: ${{ steps.before_deploy.outputs.file_name }}
          asset_content_type: application/gzip

      # Upload to GH Actions Artifacts
      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.before_deploy.outputs.artifact_name }}
          path: ./build/src/${{ steps.before_deploy.outputs.binary_path }}



  # Common Build matrix for builds on Ubuntu Lasted VM       
  ubuntu_24_build:
    name: ${{ matrix.build_name }}
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        # Add more compilers here if you need them
        build_name: ['Ubuntu 24.04 - GCC 13', 'Ubuntu 24.04 - Clang 16']
        include:
          - build_name: 'Ubuntu 24.04 - GCC 13'
            package_name: 'gcc-13 g++-13'
            cc: gcc-13
            cxx: g++-13
            label: ubuntu-24.04-linux-gcc-13
            deployable: false
          - build_name: 'Ubuntu 24.04 - Clang 16'
            package_name: 'clang-16'
            cc: clang-16
            cxx: clang++-16
            label: ubuntu-24.04-linux-clang-16
            deployable: false
    env:
      CCACHE_DIR: $GITHUB_WORKSPACE/.ccache
      LABEL: ${{ matrix.label }}
    steps:
      - uses: actions/checkout@v4

      # Fetch Dependencies
      - name: Dependencies
        run: |
          sudo apt update
          sudo apt upgrade
          sudo apt install -y libboost-all-dev libssl-dev ${{ matrix.package_name }}
          
      - name: Setup ccache
        run: |
          sudo apt install ccache
          
      - name: Retrieve ccache
        uses: actions/cache@v4
        with:
          path: .ccache
          key: ccache-${{ matrix.label }}     
     
     # Configure the project with cmake
      - name: Configure
        env:
          CC: ${{ matrix.cc }}
          CXX: ${{ matrix.cxx }}
        run: |
          mkdir build && cd build
          cmake -DARCH=default -DCMAKE_BUILD_TYPE=Release -DSTATIC=true ..
          
      # Build for linux
      - name: Build
        run: |
          cd build
          make 

      # Test the crypto
      - name: Test Crypto
        run: |
          cd build/src
          ./cryptotest      
            
      # Prepare for deploy
      - name: Prepare for Deploy
        id: before_deploy
        env:
          COMMIT_SHA: ${{ github.sha }}
        run: |
          if [[ "${TAG:5:4}" == "tags" ]]; then export TAG=${TAG:10}; else export TAG=${COMMIT_SHA}; fi
          cd build/src
          TARGETS="bitcoinnovad miner bitcoinnova-wallet cryptotest bitcoinnova-service wallet-api wallet-upgrader"
          if [[ "${LABEL}" != "aarch64" ]]; then strip ${TARGETS}; fi
          rm -rf BitcoinNova-${TAG}
          mkdir BitcoinNova-${TAG}
          cp ${TARGETS} BitcoinNova-${TAG}/
          cp ../../LICENSE BitcoinNova-${TAG}/
          tar cvfz BitcoinNova-${TAG}-${LABEL}.tar.gz BitcoinNova-${TAG}/
          echo ::set-output name=binary_path::BitcoinNova-${TAG}
          echo ::set-output name=artifact_name::BitcoinNova-${TAG}-${LABEL}
          echo ::set-output name=file_name::BitcoinNova-${TAG}-${LABEL}.tar.gz
     
      # Upload to GH Release
      - name: Upload to GH Release
        if: github.event_name == 'release' && matrix.deployable
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./build/src/${{ steps.before_deploy.outputs.file_name }}
          asset_name: ${{ steps.before_deploy.outputs.file_name }}
          asset_content_type: application/gzip

      # Upload to GH Actions Artifacts
      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.before_deploy.outputs.artifact_name }}
          path: ./build/src/${{ steps.before_deploy.outputs.binary_path }}      
        

  # MacOS build
  macos_build:
    name: macOS
    runs-on: macos-13
    env:
      CC: /usr/local/opt/llvm@15/bin/clang
      CXX: /usr/local/opt/llvm@15/bin/clang++
      LABEL: osx
      CCACHE_DIR: $GITHUB_WORKSPACE/.ccache
    steps:
      - uses: actions/checkout@v4

      # Fetch Dependencies
      - name: Dependencies
        run: |
           brew install --force llvm@15 ccache
           brew reinstall llvm@15
           brew link --overwrite llvm@15
           ln -s /usr/local/opt/llvm@15 /usr/local/opt/llvm

      - name: Boost 1.88
        run: |
           wget https://archives.boost.io/release/1.88.0/source/boost_1_88_0.tar.gz
           tar -xjf boost_1_88_0.tar.gz
           cd boost_1_88_0
           ./bootstrap.sh --prefix=$GITHUB_WORKSPACE/boost_1_88 --with-libraries=all --without-libraries=mpi
           ./b2 install
           
      - name: Retrieve ccache
        uses: actions/cache@v4
        with:
          path: .ccache
          key: ccache-osx

      # Configure project with cmake
      - name: Configure
        run: |
          mkdir build && cd build
          cmake -DARCH=default -DCMAKE_BUILD_TYPE=Release -DSTATIC=true -DBOOST_ROOT=$GITHUB_WORKSPACE/boost_1_88 ..
          
      # Build for macOS
      - name: Build
        run: |
          cd build
          make -j2
          
      # Test the crypto
      - name: Test Crypto
        run: |
          cd build/src
          ./cryptotest
          
      # Prepare for deploy
      - name: Prepare for Deploy
        id: before_deploy
        env:
          COMMIT_SHA: ${{ github.sha }}
        run: |
          if [[ "${TAG:5:4}" == "tags" ]]; then export TAG=${TAG:10}; else export TAG=${COMMIT_SHA}; fi
          cd build/src
          TARGETS="bitcoinnovad miner bitcoinnova-wallet cryptotest bitcoinnova-service wallet-api wallet-upgrader"
          strip ${TARGETS}
          rm -rf BitcoinNova-${TAG}
          mkdir BitcoinNova-${TAG}
          cp ${TARGETS} BitcoinNova-${TAG}/
          cp ../../LICENSE BitcoinNova-${TAG}/
          tar cvfz BitcoinNova-${TAG}-${LABEL}.tar.gz BitcoinNova-${TAG}/
          echo ::set-output name=binary_path::BitcoinNova-${TAG}
          echo ::set-output name=artifact_name::BitcoinNova-${TAG}-${LABEL}
          echo ::set-output name=file_name::BitcoinNova-${TAG}-${LABEL}.tar.gz
          
      # Upload to GH Release
      - name: Upload to GH Release
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./build/src/${{ steps.before_deploy.outputs.file_name }}
          asset_name: ${{ steps.before_deploy.outputs.file_name }}
          asset_content_type: application/gzip

      # Upload to GH Actions Artifacts
      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.before_deploy.outputs.artifact_name }}
          path: ./build/src/${{ steps.before_deploy.outputs.binary_path }}
          

  windows_build:
    name: Windows
    runs-on: windows-latest
    env:
      MSBUILD_PATH: "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/MSBuild/Current/Bin"
      LABEL: windows
    steps:
      - uses: actions/checkout@v4

      - name: Setup clcache
        run: pip install clcache

      - name: Retrieve clcache
        uses: actions/cache@v4
        with:
          path: clcache
          key: clcache-windows

      - name: Install OpenSSL
        run: choco install openssl

      - name: Install Boost 1.88.0
        run: |
          $link = "https://boost.teeks99.com/bin/1.88.0/boost_1_88_0-msvc-14.2-64.exe"
          $path = "C:\boost.exe"
          [Net.WebClient]::new().DownloadFile($link, $path)
          Start-Process C:\boost.exe -ArgumentList "/DIR=C:\local\boost_1_88_0","/VERYSILENT" -Wait
          Get-ChildItem C:\local\boost_1_88_0

      # Configure project with cmake
      - name: Configure
        run: |
          mkdir build
          cd build
          cmake -G "Visual Studio 17 2022" -A x64 .. -DARCH=default -DBOOST_ROOT=C:/local/boost_1_88_0
      
      # Build for Windows
      - name: Build
        run: |
          $env:CLCACHE_DIR = "$env:GITHUB_WORKSPACE\clcache"
          $env:PATH = "$env:PATH;$env:MSBUILD_PATH"
          cd build
          MSBuild BitcoinNova.sln /p:Configuration=Release /p:PlatformToolset=v142 /m
      
      # Test the crypto
      - name: Test Crypto
        shell: bash
        run: |
          cd build/src/Release
          ./cryptotest.exe
      
      # Prepare for deploy
      - name: Prepare for Deploy
        shell: bash
        id: before_deploy
        env:
          COMMIT_SHA: ${{ github.sha }}
        run: |
          if [[ "${TAG:5:4}" == "tags" ]]; then export TAG=${TAG:10}; else export TAG=${COMMIT_SHA}; fi
          cd build/src/Release
          rm -rf BitcoinNova-${TAG}
          mkdir BitcoinNova-${TAG}
          cp *.exe BitcoinNova-${TAG}/
          cp ../../../LICENSE BitcoinNova-${TAG}/
          7z a BitcoinNova-${TAG}-${LABEL}.zip BitcoinNova-${TAG}/
          echo ::set-output name=binary_path::BitcoinNova-${TAG}
          echo ::set-output name=artifact_name::BitcoinNova-${TAG}-${LABEL}
          echo ::set-output name=file_name::BitcoinNova-${TAG}-${LABEL}.zip
      
      # Upload to GH Release
      - name: Upload to GH Release
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./build/src/Release/${{ steps.before_deploy.outputs.file_name }}
          asset_name: ${{ steps.before_deploy.outputs.file_name }}
          asset_content_type: application/zip

      # Upload to GH Actions Artifacts
      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.before_deploy.outputs.artifact_name }}
          path: ./build/src/Release/${{ steps.before_deploy.outputs.binary_path }}
